import Html exposing (div, button, text)
import Html.Events exposing (onClick, on, targetValue)
import StartApp.Simple as StartApp
import Dict
import List
import String
import Random

type alias State = String

type alias  MarkovChain = Dict.Dict State (List (Float, State))
initTrainingData = """
The Project Gutenberg EBook of Les Miserables, by Victor Hugo

This eBook is for the use of anyone anywhere at no cost and with
almost no restrictions whatsoever.  You may copy it, give it away or
re-use it under the terms of the Project Gutenberg License included
with this eBook or online at www.gutenberg.org
"""
                   
model = { markovChain = trainMarkovChain (tokenizeData initTrainingData)
        , memory = 1
        , trainingData = initTrainingData
        , data = "a"
        , seed = Random.initialSeed 0}

view address model =
  div []
    [ -- div [] [ text <| toString model.markovChain ]
      div [] [ text <| case currentState model of
                         Nothing -> "No cur state"
                         Just curToken -> toString <| nextState model.seed model.markovChain curToken ]
    , div [] [ text model.data ]
    , button [ onClick address TrainMarkovChain ] [ text "Train Markov Chain" ]
    , button [ onClick address Daydream ] [ text "Daydream" ]
    ]

type Action = NoOp | TrainMarkovChain | Daydream

update action model =
  case action of
    TrainMarkovChain -> { model | markovChain <- trainMarkovChain (tokenizeData model.trainingData) }
    Daydream         -> case currentState model of
                          Nothing       -> { model | data <- String.concat [model.data, "a"] }
                          Just curToken -> case nextState model.seed model.markovChain <| curToken of
                                             (Just token, newSeed) -> { model | data <- String.concat [ model.data, " ", token ]
                                                                              , seed <- newSeed }
                                             (Nothing, newSeed)    -> { model | seed <- newSeed
                                                                      , data <- String.concat [model.data, "b"] }

updateNextState : State -> Maybe (List (Float, State)) -> Maybe (List (Float, State))
updateNextState nextState = \mStates -> case mStates of
                                          Nothing         -> Just [(1, nextState)]
                                          Just nextStates -> case List.filter (\(_, s) -> s == nextState) nextStates of
                                                               []        -> Just <| (1, nextState) ::  nextStates
                                                               [(p, s)]  -> Just <| (p+1, nextState) :: List.filter (\(_, s) -> s /= nextState) nextStates

updateState : State -> State -> MarkovChain -> MarkovChain
updateState state nextState mc = Dict.update state (updateNextState nextState) mc

normalizeNextStates : State -> List (Float, State) -> List (Float, State)
normalizeNextStates state nextStates = let totalP = List.sum <| List.map fst nextStates in
                                       List.map (\(p, s) -> (p/totalP, s)) nextStates

normalizeProbabilities : MarkovChain -> MarkovChain
normalizeProbabilities mc = Dict.map normalizeNextStates mc

trainMarkovChain : List State -> MarkovChain
trainMarkovChain input = let (prev, markovChain) = List.foldl (\state (p, mc) -> (state, updateState p state mc)) ("", Dict.empty) input in
                         markovChain |> normalizeProbabilities

tokenizeData data = List.filter (\token -> token /= "") <| String.words data

probability : Random.Generator Float
probability = Random.float 0 1

accumPValues : List (Float, State) -> List (Float, State)
accumPValues nextStates = let (_, states) = List.foldl (\(p, state) (accumP, past) -> (p + accumP, (p + accumP, state)::past)) (0, [(0, "")]) nextStates in List.reverse states
              
nextState : Random.Seed -> MarkovChain -> State -> (Maybe State, Random.Seed)
nextState seed mc state = case Dict.get state mc of
                       Nothing -> (Nothing, seed)
                       Just nextStates -> let (p, newSeed) = Random.generate probability seed
                                              nextState = List.head <| List.filter (\(cumulativeP, state) -> cumulativeP > p) <| accumPValues nextStates in
                                          case nextState of
                                            Nothing      -> (Nothing, newSeed)
                                            Just (_, ns) -> (Just ns, newSeed)
                                             

currentState model = List.head <| List.reverse <| tokenizeData model.data

trainMarkovChainMailbox : Signal.Mailbox Action
trainMarkovChainMailbox = Signal.mailbox NoOp


main = let input = Signal.merge
  modelSignal = Signal.foldp update model 
